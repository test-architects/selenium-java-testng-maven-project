Page Object Model and PageFactory

`PageFactory.initElements(driver, this);` is a key part of the Page Object Model (POM) design pattern in Selenium. 
To understand its significance, let's break down what it does and why it is used.

### Page Object Model (POM)

The Page Object Model is a design pattern in Selenium that encourages a clear separation between the test code 
and the code that interacts with the web page. 
Each web page is represented by a class, and web elements on that page are represented as data members within the class.

### PageFactory

`PageFactory` is a class provided by Selenium to support the POM pattern. It helps in initializing the elements of a Page Object.

`PageFactory.initElements(driver, this);`

- **`driver`**: This is the `WebDriver` instance used to find the web elements.
- **`this`**: This refers to the current instance of the `LoginPage` class.

When you call `PageFactory.initElements(driver, this);`, it performs the following actions:

1. **Locates Web Elements**:
   - It looks for fields annotated with `@FindBy`, `@FindAll`, `@FindBys`, 
   or default locating mechanisms like field names in the `this` (current instance of `LoginPage`) class.
   
2. **Initializes Web Elements**:
   - It initializes these fields with proxy objects. 
   The actual web elements are not immediately located; instead, they are located only when they are used (lazy initialization). 
   This makes the class load faster and avoids `NoSuchElementException` if the elements are not immediately available.

3. **Provides Better Readability and Maintainability**:
   - Using `PageFactory` improves code readability and maintainability by clearly defining the structure of page objects 
   and their associated elements.

### Example: Annotating Web Elements

Here's how you typically annotate web elements in a Page Object class:

```java
package project.squads.admission.pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import project.squads.BasePage;

public class LoginPage extends BasePage {

    @FindBy(id = "username")
    private WebElement usernameField;

    @FindBy(id = "password")
    private WebElement passwordField;

    @FindBy(id = "loginButton")
    private WebElement loginButton;

    public LoginPage(WebDriver driver) {
        super(driver);
        PageFactory.initElements(driver, this);
    }

    // Methods to interact with elements
    public void enterUsername(String username) {
        usernameField.sendKeys(username);
    }

    public void enterPassword(String password) {
        passwordField.sendKeys(password);
    }

    public void clickLoginButton() {
        loginButton.click();
    }
}
```

### Physical Significance

- Initialization: 	`PageFactory.initElements(driver, this);` initializes the web elements defined in the `LoginPage` class using the given `driver`.
- Encapsulation: 	It encapsulates the logic for locating and interacting with web elements within the page object class, 
					adhering to the POM design pattern.
- Lazy Loading: 	It uses lazy loading to find elements only when they are needed, 
					which can improve performance and reduce the risk of exceptions during initialization.

By including `PageFactory.initElements(driver, this);` in your `LoginPage` constructor, 
you ensure that all annotated web elements are properly initialized when an instance of `LoginPage` is created. 
This makes your test code cleaner, more readable, and easier to maintain.